class Solution {
    int[] parent;
    int[] size;
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        parent = new int[graph.length];
        size = new int[graph.length];
        
        for(int i = 0; i < parent.length; i++){
            parent[i] = i;
            size[i] = 1;
        }
        
        for(int i = 0; i < graph.length; i++){
            for(int j = 0; j < graph[0].length; j++){
                if(graph[i][j] == 1 && i != j){
                    unionHelper(i, j);
                }
            }
        }
        
        int[] infectedNodes = new int[graph.length];
        
        for(int i : initial){
            int par = find(i);
            infectedNodes[par]++;
        }
        
//         int node = -1;
//         int sizeOfComp = 0;
        
//         for(int i : initial){
//            int par = find(i);
//            int infectedNodeCount = infectedNodes[par];
            
//             if(infectedNodeCount == 1){
//                 if(node == -1){
//                     node = i;
//                     sizeOfComp = size[par];
//                 } else if(size[par] > sizeOfComp){
//                     node = i;
//                     sizeOfComp = size[par];
//                 } else if(i < node){
//                     node = i;
//                     sizeOfComp = size[par];
//                 }
//             }
//         }
        
//         if(node == -1){
//             int idx = initial[0];
//             for(int i : initial){
//                 if(i < idx){
//                     idx = i;
//                 }
//             }
            
//             return idx;
//         }
        
        Arrays.sort(initial);
        
        int mi = initial[0];
        int ms = 0;
        
        for(int i : initial){
            int par = find(i);
            
            if(infectedNodes[par] == 1){
                if(size[par] > ms){
                    mi = i;
                    ms = size[par];
                }
            }
        }
        
        return mi;
    }
    
    public void unionHelper(int a, int b){
        int leadA = find(a);
        int leadB = find(b);
        
        if(leadA != leadB){
            union(leadA, leadB);
        }
    }
    
    public void union(int a, int b){
        if(size[a] < size[b]){
            parent[a] = b;
            size[b] += size[a];
        } else if(size[b] <= size[a]){
            parent[b] = a;
            size[a] += size[b];
        }
    }
    
     int find(int x){
        if(parent[x] != x){
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
}